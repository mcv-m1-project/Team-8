function [TP, FP, FN] = ConnectedComponentDetection(valid_dir, ...
                                                    form_factor_min, ...
                                                    form_factor_max, ...
                                                    filling_ratio_min, ...
                                                    filling_ratio_max)
% ConnectedComponentDetection
%
% Test the connected component approach with the given thresholds.
% These thresholds are used to select the signal candidates among
% all the connected component objects.
%
%  function [TP, FP, FN] = ConnectedComponentDetection(...)
% 
%    Parameter name      Value
%    --------------      -----
%    valid_dir           The folder with the validation dataset. It
%                        must be contain a pixelCandidates/
%                        subfolder, with the images generated by
%                        the Block 2 detector (color segmentation +
%                        morphology).
%    form_factor_min     Min form factor to be considered a
%                        candidate
%    form_factor_max     Max form factor to be considered a candidate
%    filling_ratio_min   Min filling ratio to be considered a candidate
%    filling_ratio_max   Max filling ration to be considered a candidate
%

    input_files = ListFiles([valid_dir, '/pixelCandidates/']);
    im_files = ListFiles(valid_dir);
    
    if size(input_files, 1) ~= size(im_files, 1)
        error(['valid_dir: gt/ and pixeldet/ subdirs does not match']);
    end

    TP = 0;
    FP = 0;
    FN = 0;
    for i=1:size(im_files, 1)
        fprintf('.');
        
        gt_file = ['gt.', im_files(i).name(1:end-3), 'txt'];
        annotations = LoadAnnotations([valid_dir, '/gt/', gt_file]);
        
        im = imread([valid_dir, '/pixelCandidates/', input_files(i).name]);
        bb = ConnectedComponents(im);
        bb = FormFactorFilter(bb, form_factor_min, form_factor_max);
        bb = FillingRatioFilter(im, bb, ...
                                filling_ratio_min, ...
                                filling_ratio_max);
        
        [localTP, localFN, localFP] = PerformanceAccumulationWindow(bb, annotations);
        TP = TP + localTP;
        FP = FP + localFP;
        FN = FN + localFN;
    end
   
    fprintf('\n');
end